# -*- coding: utf-8 -*-
"""Python project (Data 6505) - Exploratory Analysis of Spotify

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10UrJlHPUNnSANU-1zP85xl7bXbLJ_5un

# Exploratory Analysis of Spotify

***Objective***

Our primary objective is to give recommendations for artists looking to break into the music industry. We hope to do this by illustrating the most important features when writing a song, highlighting other popular artists to emmulate, and giving genre specific recommendations.

**Data Dictionary**

| Feature Name | Definition | Key |
| ------------ | ---------- | --- |
| track_id | _The Spotify ID for the track_ | ... |
| artists | _Name of the Artists_ | ... | 
| album_name | _Album name_ | ... |
| track_name | _Track name_ | ... |
| popularity | _Popularity_ | ... |
| duration_ms | _The duration of the track in milliseconds._ | ... |
| explicit | _Explicit_ | __True, False__  |
| danceability | _Danceability describes how suitable a track is for dancing based on a combination of musical elements including tempo, rhythm stability, beat strength, and overall regularity_ |__0.0 = least danceable,  1.0 = most danceable__  |
| energy | _Energy represents a perceptual measure of intensity and activity. Typically, energetic tracks feel fast, loud, and noisy_ | __0.0 to 1.0__ |
| key | _The key the track is in. Integers map to pitches using standard Pitch Class notation. E.g. 0 = C, 1 = C♯/D♭, 2 = D, and so on. If no key was detected, the value is -1_ | __>= -1  <= 11__ |
| loudness | _Loudness of the track_ | ... |
| mode | _Mode indicates the modality (major or minor) of a track, the type of scale from which its melodic content is derived_ | __Major = 1 , Minor = 0__ |
| speechiness | _Speechiness detects the presence of spoken words in a track_ | ... |
| acousticness | _A confidence measure from 0.0 to 1.0 of whether the track is acoustic. 1.0 represents high confidence the track is acoustic_ | __>= 0    <= 1__ |
| instrumentalness | _Predicts whether a track contains no vocals. "Ooh" and "aah" sounds are treated as instrumental in this context_ | ... |
| liveness | _Detects the presence of an audience in the recording. Higher liveness values represent an increased probability that the track was performed live_ | ... |
| valence | _A measure from 0.0 to 1.0 describing the musical positiveness conveyed by a track_ | __>= 0  <= 1__|
| tempo | _The overall estimated tempo of a track in beats per minute (BPM)_ | ... |
| time_signature | _An estimated time signature_ | __>= 3     <= 7__ |
| track_genre | _Genre of the track_ | __Pop, country, rap, etc..__ |

Detailed information about the features are also available [here](https://developer.spotify.com/documentation/web-api/reference/#/operations/get-audio-features)


[Data Source](https://www.kaggle.com/datasets/maharshipandya/-spotify-tracks-dataset?select=dataset.csv)

# **Overall Topics of Research:**

What variables have the most direct impact on popularity 

*   Correlation of Variables to Popularity
*   Which artist had the highest popularity based on their songs grouped by genre
How does the average duration of a song vary based on its genre


*   When comparing specific genres, how do the variable's significance change
*  What would we recommend to a new artist attempting to start in one of the genress below:

Indian Music

Pop Music

Country Music

# Dataset Overview*
"""

# Commented out IPython magic to ensure Python compatibility.
# importing requried python packages
import pandas as pd
import numpy as np
# %matplotlib inline 
import matplotlib.pyplot as plt
plt.style.use('classic')
import seaborn as sns

# Reads the spotify data from a github repository and stores it in a dataframe.
data = 'https://raw.githubusercontent.com/Matt-Bevacq/DATA-6505/main/spotify%20project%20data.csv'


spotify_df = pd.read_csv(data, sep=',')

# displays the first five rows of the spotify
spotify_df.head()

"""# Dataset Exploration*"""

# understanding the basic information of the data

def all_about_data(spotify_df):
    print("Some basic information about the data:\n")

    #shape of the dataframe
    print("Number of rows:",spotify_df.shape[0])
    print("Number of columns:",spotify_df.shape[1])

    #List column names
    print("\nColumn Names:")
    print(spotify_df.columns)

    #data types for each column in the dataframe
    print("\nDatatype of each columns:")
    print("Dataypes:",spotify_df.dtypes)

    #summary stats
    print("\nSummary Stats:")
    print(spotify_df.describe())

    #missing value inspection
    print("\nMissing Values:")
    print(spotify_df.isna().sum())

all_about_data(spotify_df)

# displaying the columns
spotify_df.columns

#describing dataset
spot = spotify_df.describe()

spot.swapaxes("index", "columns")

"""# **Data Cleaning**"""

#Checking null values
spotify_df[spotify_df["artists"].isnull()]

#copying the spotify_df dataset
spotify_df_copy = spotify_df.copy()

#drop 3 null values
spotify_df = spotify_df.dropna()

#drop the re-released songs by artists from different albums
spotify_df = spotify_df.drop_duplicates(subset = ['artists', 'track_name'], keep = 'first').reset_index(drop = True)

#drop the unwanted columns
spotify_df.drop(['Unnamed: 0'], axis=1, inplace=True )

#converting [duration_ms] into [duration_min]
spotify_df['duration_min'] = round((spotify_df['duration_ms'])/1000/60,2)

#checking the shape of the dataset after cleaning the data
spotify_df.shape

#checking for missing values after cleaning the data
spotify_df.isna().sum()

spotify_df.head()

"""# Exploratory questions

**What variables have the most direct impact on popularity?**

When asking this question, our hypothesis was that there would be certain variables that would have a significant role in song popularity. What we found was that there is no significant variable that could dictate popularity when looking at all of the songs across genres.
"""

poplr_top_tracks = spotify_df.groupby("track_name")['popularity'].mean().sort_values().tail(20)
poplr_top_tracks.plot.barh(color='#86bf91')
plt.title('Top Tracks with Popularity')
plt.xlabel('Tracks')
plt.ylabel('Popularity')

"""The most popular song is "Unholy (feat. Kim Petras)" with a popularity score of 100

**Which artist had the highest popularity based on their songs grouped by genre?**
"""

artists_grp = spotify_df.groupby('artists')['popularity'].mean().sort_values().tail(10)
artists_grp.plot.barh(color='orange')
plt.title('Artists Average Popularity')
plt.xlabel('Average Popularity')
plt.ylabel('Artists')

"""The artist with the highest popularity based on their songs Sam Smith and Kim Petras.

**How does the average duration of a song vary based on its genre?**
"""

#average duration of a song vary based on its genre


average_len_genre = spotify_df.groupby('track_genre')['popularity'].mean().sort_values().tail(10)
average_len_genre.plot.barh(color='skyblue')
plt.title('Genre Average Popularity')
plt.xlabel('Average Popularity')
plt.ylabel('Genre')

"""# **Genre: Pop-music**"""

# create subset with data that only has genre of pop
pop_df = spotify_df[spotify_df['track_genre']=='pop']

# list of popular songs based on previously established subset sorted by popularity
pop_df.sort_values(by=['popularity'], ascending=False)

pop_df.groupby(by=['track_genre']).mean()[['danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='track_genre')

pop_corr_c = pop_df[['popularity','duration_min','danceability','loudness','speechiness','acousticness', 'instrumentalness', 'liveness','valence','tempo' ]].corr()

#sns.set(style = 'darkgrid')


plt.figure(figsize=(12,8))
#sns.heatmap(corr, cmap='YlGnBu', annot=True)
sns.heatmap(pop_corr_c,
            vmin=-1, vmax=1, # set the color bar range to [-1, 1]
            cmap='coolwarm', # set the color scheme to 'coolwarm'
            annot=True)

"""The three variables with the highest correlation to popularity for pop music are **loudness, speechiness, and key**"""

# top 25 most popular pop songs
pop_t10 = pop_df.nlargest(n=25, columns=['popularity'])
pop_t10.groupby('artists').head(25)

# bottom 25 most popular pop songs
pop_b10 = pop_df.nsmallest(n=25, columns=['popularity'])
pop_b10.groupby('artists').head(25)

popular_pop_artists_mean = pop_df.groupby(by=['artists'])['popularity'].mean().sort_values().tail(10)
popular_pop_artists_mean.plot.barh(color='red')
plt.title('Pop Artist Popularity')
plt.xlabel('Popularity (by mean)')
plt.ylabel('Artists')

"""The artists with the highest song popularity are **Joji, Harry Style**, and colab work between **Rema and Selena Gomez**"""

pop_df.groupby(by=['track_genre','artists']).mean()[['popularity','danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='popularity').tail(3)

"""Average **loudness is -6.4125**, with average of **speechiness being .0474**. The numbers of the top artists seems to indicate that there is even *further divide within the genre of pop* with what people tend to respond to, due the the large differences in variables such as valence, energy and accousticness. Pop artists like Harry Styles the work with Rema and Selena Gomez work well with concert settings due to their energy, while Joji focusing more on acousticness might indicate """

pop_releases = pop_t10['artists'].unique()

#top 10 country artists with most releases
pop_art_releases = pop_df['artists'].value_counts().sort_values().tail(10)
pop_art_releases

pop_art_releases.plot.barh(color='yellow')
plt.title('Pop Artist Number of Releases')
plt.xlabel('Songs Released')
plt.ylabel('Artists')
plt.show()

popular_pop_track = pop_df.groupby(by=['track_name'])['popularity'].mean().sort_values().tail(10)
popular_pop_track

plt.scatter(x = pop_t10['loudness'], y = pop_t10['popularity'])

plt.scatter(x = pop_b10['loudness'], y = pop_b10['popularity'])

plt.scatter(x = pop_t10['speechiness'], y = pop_t10['popularity'])

import pandas as pd
data = [['duration_min',3.800466491228071, 3.67792, 3.05, 4.12], 
        ['danceability',0.5668000657894738, 0.630441, 0.541, 0.727],
        ['energy',0.6413827583964912, 0.6064369999999999, 0.488, 0.72725],       
        ['key', 5.309140350877193, 5.412, 2.0, 8.0],
        ['loudness', -8.258960368421052, -6.953969, -8.600000000000001, -5.1345],
        ['mode', 0.6375526315789474, 0.509, 0.0, 1.0],
        ['speechiness', 0.08465211228070177, 0.0799752, 0.0358, 0.0828],
        ['acousticness', 0.3149100624799999, 0.34369250999999995, 0.08305, 0.57575],
        ['instrumentalness',0.15604958922122808, 0.009026303910000002, 0.0, 2.5125e-05],
        ['liveness', 0.21355283605263162, 0.15825579999999997, 0.09332499999999999, 0.183],
        ['valence', 0.4740682309736842, 0.5062227, 0.344, 0.67825],
        ['tempo', 122.14783728947369, 120.92707300000001, 94.999, 144.02775]]

pop_rec = pd.DataFrame(data, columns = ["Variable", "Average_All_Music", "Average_Pop", "Average_Top_percentile_Pop", "Average_Bottom_percentile_Pop"])
pop_rec

df=pop_t10
boxplot = df.boxplot(column=['danceability'])  
plt.title('Danceability pop top 25 songs')

df=pop_t10
boxplot = df.boxplot(column=['loudness'])  
plt.title('Loudness pop top 25 songs')

"""Loudness remains on the lower side, with the top 25 songs being **slightly higher** than the top 25th percentile. This could mean that the loudness for a song would be a more ideal **sweet spot around -7.0**"""

df=pop_t10
boxplot = df.boxplot(column=['speechiness'])  
plt.title('Speechiness pop top 25 songs')

"""# Genre: Indian music

**Indian genre in Spotify can be defined as a genre of music that originates from India. It includes a variety of styles and influences, including Indian classical music, Bollywood film music, Indi-pop, folk, and contemporary music. It may also include elements of rock, jazz, reggae, and hip hop.**
"""

# create subset with data that only has genre of pop
ind_df = spotify_df[spotify_df['track_genre'] == 'indian']

# list of popular songs based on previously established subset sorted by popularity
ind_df.sort_values(by=['popularity'], ascending=False)

ind_df.groupby(by=['track_genre']).mean()[['danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='track_genre')

ind_corr = ind_df[['popularity','duration_min','danceability','loudness','speechiness','acousticness', 'instrumentalness', 'liveness','valence','tempo' ]].corr()

ind_corr=ind_df[['popularity','duration_min','danceability','loudness','speechiness','acousticness', 'instrumentalness', 'liveness','valence','tempo']].corr()
plt.figure(figsize=(14,8))

sns.heatmap(ind_corr,
            vmin=-1, vmax=1, # set the color bar range to [-1, 1]
            cmap='coolwarm', # set the color scheme to 'coolwarm'
            annot=True)

"""The variables with the highest correlation to popularity for indian music are **danceability, loudness and valence.**"""

ind_df.groupby(by=['track_genre','artists']).mean()[['popularity','danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='popularity').tail(3)

# top 10 most popular Indian songs
ind_top10 = ind_df.nlargest(n=10, columns=['popularity'])
ind_top10.groupby('artists').head(10)

# bottom 10 most popular Indian songs
ind_bottom10 = ind_df.nsmallest(n=10, columns=['popularity'])
ind_bottom10.groupby('artists').head(10)

popular_indian_artists_avg = ind_df.groupby(by=['artists'])['popularity'].mean().sort_values().tail(10)
popular_indian_artists_avg.plot.barh(color='#4958B5')
plt.title('Indian Artist Popularity')
plt.xlabel('Popularity')
plt.ylabel('Artists')
plt.show()

"""The artist with the highest song popularity are **Pritam, Tochi Raina and Rekha Bhardwaj**."""

Indian_releases = ind_top10['artists'].unique()

#top 10 Indian artists with most releases
Indian_art_releases = ind_df['artists'].value_counts().sort_values().tail(10)
Indian_art_releases

Indian_art_releases.plot.barh(color='#7eb54e')
plt.title('Top 10 Indian Artists with Most Releases')
plt.xlabel('Songs Released')
plt.ylabel('Artists')
plt.show()

"""The artist with most releases are  **Pritam and Arijit Singh**"""

#popular_indian_track = ind_df.groupby(by=['track_name'])['popularity'].mean().sort_values(ascending=False)[0:10]
#popular_indian_track

#top 10 popular song
popular_indian_track = ind_df.groupby(by=['track_name'])['popularity'].mean().sort_values().tail(10)
popular_indian_track
popular_indian_track.plot.barh(color='grey')
plt.title('Top 10 Popular song')
plt.xlabel('Popularity')
plt.ylabel('Track Name')
plt.show()

"""The most popular track is **Kesariya** from Brahmastra movie."""

import pandas as pd
data = [['duration_min',3.8568536162574842, 3.99387811634349, 3.2925,4.72], 
        ['danceability',0.5592777344758486, 0.585831024930748, 0.5539200000000001, 0.60748],
        ['energy',0.6350271440478972, 0.5527119113573408, 0.387, 0.736],
        ['key', 5.285870594165304, 5.090027700831025, 2.0, 8.0],
        ['loudness',-8.593813501186363, -9.08297783933518, -11.370000000000001, -6.10475],
        ['mode', 0.6323502292816661, 0.7049861495844876, 0.0, 1.0],
        ['speechiness', 0.08899362314208088, 0.06846371191135735, 0.0329, 0.06955],
        ['acousticness',0.32965414389914066, 0.5121708504155125, 0.259, 0.7817500000000001],
        ['instrumentalness',0.18473764623437136, 0.03761883072022161, 0.0, 0.00149],
        ['liveness', 0.21972076210029384, 0.1747862880886427, 0.09895, 0.20075],
        ['valence', 0.4632721169029148, 0.44753337950138505, 0.2795, 0.61225],
        ['tempo', 122.14545063375171, 115.2345484764543, 90.83075, 132.00549999999998]]

ind_rec = pd.DataFrame(data, columns = ["Variable", "Average_All_Music", "Average_Indian", "Indian_Music_Quartile_1", "Indian_Music_Quartile_3"])
ind_rec

df=ind_top10
boxplot = df.boxplot(column=['danceability'])  
plt.title('Danceability of top 10 Indian songs')

df=ind_top10
boxplot = df.boxplot(column=['valence'])  
plt.title('valence of top 10 Indian songs')

df=ind_top10
boxplot = df.boxplot(column=['loudness'])  
plt.title('Loudness of top 10 Indian songs')

"""#Genre: Country music"""

# create subset with data that only has genre of country
country_df = spotify_df[spotify_df['track_genre']=='country']

#version 2 (b)
# list of popular songs based on previously established subset sorted by popularity
country_df.sort_values(by=['popularity'], ascending=False).head(20)

country_df.shape

country_df['artists'].nunique()

#creating dataframe sorted by popularity
popular_country_music = country_df.sort_values(by = 'popularity', ascending= False)

popular_country_music.head()

country_df.groupby(by=['track_genre']).mean()[['danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='track_genre')

country_corr = country_df[['popularity','duration_min','danceability','loudness','speechiness','acousticness', 'instrumentalness', 'liveness','valence','tempo']].corr()

plt.figure(figsize=(12,8))
#sns.heatmap(corr, cmap='YlGnBu', annot=True)
sns.heatmap(country_corr,
            vmin=-1, vmax=1, # set the color bar range to [-1, 1]
            cmap='coolwarm', # set the color scheme to 'coolwarm'
            annot=True)

popular_country_artists_mean = country_df.groupby(by=['artists'])['popularity'].mean().sort_values(ascending=False)
popular_country_artists_mean.head(10)

# top 25 most popular pop songs
country_top25 = country_df.nlargest(n=25, columns=['popularity'])
country_top25.head(25)

# bottom 25 most popular pop songs
country_bottom25 = country_df.nsmallest(n=25, columns=['popularity'])
country_bottom25.head(25)

grp_country = country_df.groupby('artists')
artists_country = grp_country[['popularity']].mean().sort_values(by=['popularity']).tail(20)
artists_country.plot.barh(color='red')
plt.title('Country Artist Popularity')
plt.xlabel('Popularity')
plt.ylabel('Artists')
plt.show()

country_df.groupby(by=['track_genre','artists']).mean()[['popularity','danceability','energy','loudness','speechiness','acousticness','instrumentalness','tempo', 'valence','duration_min']].sort_values(by='popularity').tail(3)

#country_releases = country_top10['artists'].unique()

#top 10 country artists with most releases
country_art_releases = country_df['artists'].value_counts().sort_values().tail(10)
country_art_releases

country_art_releases.plot.barh(color='yellow')
plt.title('Country Artist Number of Releases')
plt.xlabel('Songs Released')
plt.ylabel('Artists')
plt.show()

country_releases = country_top25['artists'].unique()

#top 10 country artists with most releases
country_art_releases = country_df['artists'].value_counts().sort_values().tail(10)
country_art_releases

country_art_releases.plot.barh(color='purple')
plt.title('Country Artist Number of Releases')
plt.xlabel('Songs Released')
plt.ylabel('Artists')
plt.show()

import pandas as pd
data = [['duration_min',3.8568062009785837, 3.4305438596491227, 2.99, 3.78], 
        ['danceability',0.5592770180226697, 0.5614508771929825, 0.487, 0.63875],
        ['energy',0.6350265044380519, 0.6207231578947368, 0.474, 0.789],
        ['key', 5.285891667281355, 5.487719298245614, 2.0, 9.0],
        ['loudness', -8.593824149885668, -7.174659649122807,-8.48475, -5.06925],
        ['mode', 0.6323424553121388, 0.8807017543859649,1.0, 1.0],
        ['speechiness', 0.08899327284797523, 0.04380877192982456, 0.0291, 0.046475],
        ['acousticness', 0.3296585739089278, 0.299409847368421, 0.05275, 0.483],
        ['instrumentalness', 0.18473542379521038,0.0035864526140350884, 0.0, 1.37e-05],
        ['liveness', 0.2197189792481129,0.17465649122807017,0.0998,0.2145],
        ['valence', 0.463275445169777, 0.5226908771929825,0.34724999999999995, 0.6992499999999999],
        ['tempo', 122.14565035283124, 124.09015964912281, 98.36125000000001, 147.0195]]

country_rec = pd.DataFrame(data, columns = ["Variable", "Average All Music", "Average Country", "Country Music Quartile 1", "Country Music Quartile 3"])
country_rec

boxes = country_top25.boxplot(column=['speechiness'])  
plt.title('Speechiness Country Top 25 Songs')

boxed = country_top25.boxplot(column=['liveness'])  
plt.title('Liveness Country Top 25 Songs')

plots = country_top25.boxplot(column=['acousticness'])  
plt.title('Acousticness Country Top 25 Songs')

"""# Conclusion

* Originally we thought that there would stronger correlation with variables and popularity
* Based on the correlation matrices, there appears to be no clear one variable that can be used to directly determine a song's popularity.
* Our recommendation to artists looking to create a popular song in a given genre is to utilize the averages of the genre and top artists collected to indicate what to aim for in the qualities of their songs
*We would also urge them to reflect on the most popular artists from their chosen genre, which can inform what is most important for a designated genre
"""